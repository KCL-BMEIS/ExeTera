#!/usr/bin/env python

# Copyright 2020 KCL-BMEIS - King's College London
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from datetime import datetime, timezone
import os
import sys

try:
    import exetera
except ModuleNotFoundError:
    fixed_path = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
    sys.path.append(fixed_path)
    import exetera

from exetera.core import importer

import argparse

parser = argparse.ArgumentParser()
parser.add_argument('--version', action='version', version=exetera.__version__)
parser.add_argument('-te', '--territories', default=None,
                    help='the territory/territories to filter the dataset on (runs on all territories if not set)')
parser.add_argument('-s', '--schema', required=True,
                    help='the location and name of the schema file')
parser.add_argument('-p', '--patient_data',
                    help='the location and name of the patient data csv file')
parser.add_argument('-a', '--assessment_data',
                    help='the location and name of the assessment data csv file')
parser.add_argument('-t', '--test_data',
                    help='the location and name of the assessment data csv file')
parser.add_argument('-c', '--consent_data', default=None,
                    help='the location and name of the consent data csv file')
parser.add_argument('-o', '--output_hdf5',
                    help='the location and name of the output hdf5 file')
parser.add_argument('-d', '--data_schema', default=1, type=int,
                    help='the schema number to use for parsing and cleaning data')
parser.add_argument('-ts', '--timestamp', required=True,
                    help='the timestamp for the data being imported, in any of the following formats:'
                         '"YYYY-MM-DD", "YYYY-MM-DD hh:mm:ss", "YYYY-MM-DD hh:mm:ss(+/-)hh:mm"')
args = parser.parse_args()

errors = False
if not os.path.isfile(args.schema):
    print('-s/--schema argument must be an existing file')
    errors = True
if args.patient_data is not None and not os.path.isfile(args.patient_data):
    print('-p/--patient_data argument must be an existing file')
    errors = True
if args.assessment_data is not None and not os.path.isfile(args.assessment_data):
    print('-a/--assessment_data argument must be an existing file')
    errors = True
if args.test_data is not None and not os.path.isfile(args.test_data):
    print('-t/--test_data argument must be an existing file')
    errors = True

if errors:
    exit(-1)

if 'dev' in exetera.__version__:
    msg = ("Warning: this is a development version of exetera ({}). "
           "Please use one of the release versions for actual work")
    print(msg.format(exetera.__version__))

msg = ("Warning: the command 'h5import' is deprecated and will be removed in a future release. "
       "Please use 'exetera import' instead.")

files = {}
if args.patient_data is not None:
    files['patients'] = args.patient_data
if args.assessment_data is not None:
    files['assessments'] = args.assessment_data
if args.test_data is not None:
    files['tests'] = args.test_data
importer.import_with_schema(args.timestamp, args.output_hdf5, args.schema, files)
