#!/usr/bin/env python

# Copyright 2020 KCL-BMEIS - King's College London
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from datetime import datetime
import time

from hystore.core.load_schema import load_schema
from hystore.covidspecific import parsing_schemas, pipeline

# TODO: add flag to output values as categorical variables
if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--version', action='version', version='v0.1.9')
    parser.add_argument('-r', '--regression_test', action='store_true')
    parser.add_argument('-te', '--territories', default=None,
                        help='the territories to filter the dataset on (runs on all territories if not set)')
    parser.add_argument('-s', '--schema', required=True,
                        help='the location and name of the schema file')
    parser.add_argument('-p', '--patient_data',
                        help='the location and name of the patient data csv file')
    parser.add_argument('-po', '--patient_data_out',
                        help='the location and name of the output patient data csv file')
    parser.add_argument('-a', '--assessment_data',
                        help='the location and name of the assessment data csv file')
    parser.add_argument('-ao', '--assessment_data_out',
                        help='the location and name of the output assessment data csv file')
    parser.add_argument('-ps', '--parsing_schema', default=1, type=int,
                        help='the schema number to use for parsing and cleaning data')
    parser.add_argument('-y', '--year', default=datetime.now().year, type=int)
    args = parser.parse_args()

    if args.parsing_schema not in parsing_schemas.parsing_schemas:
        error_str = "the parsing schema must be one of {} for this version"
        print(error_str.format(parsing_schemas.parsing_schemas))
        exit(-1)

    if args.regression_test:
        pipeline.regression_test_assessments('assessments_cleaned_short.csv', args.assessment_data)
        pipeline.regression_test_patients('patients_cleaned_short.csv', args.patient_data)
    else:
        tstart = time.time()

        data_schema_version = 1
        early_filter = None
        with open(args.schema) as sf:
            data_schema = load_schema(sf)
        parsing_schema_version = args.parsing_schema
        parsing_schema = parsing_schemas.ParsingSchema(parsing_schema_version)
        pipeline_output = pipeline.pipeline(args.patient_data, args.assessment_data,
                                            data_schema, parsing_schema, args.year,
                                            territories=args.territories)
        print(f'cleaning completed in {time.time() - tstart} seconds')

        pipeline.save_csv(pipeline_output, args.patient_data_out, args.assessment_data_out,
                          data_schema)
